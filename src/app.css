body, html {
    height: 100%;
    box-sizing: border-box;
    margin: 0;
    padding: 0;
	
	font-family: Consolas;
}

#app {
    height: 100%;
}

html {
    --grid-background: #3D3D3D;
    --grid-line: #545454; /* REMEMBER TO INCLUDE OPACITY */
    --grid-line-opacity: 0.501961;
    --x-axis-color: #FF3352;
    --y-axis-color: #8BDC00; 

    --point-color: #000000;
    --entity-color: #000000;
    --construction-color: #4B4B4B;

    --construction-opacity: 0.5;

    --point-selected: #FF7A00;
    --point-hover: #FFA000;
    --entity-selected: #FFA000;
    --entity-hover: #FFD000;

    --loose-entity-color: #00A5FF;
    --loose-point-color: #0079bb;
    --solve-error-color: #DB2512;

    --regular-point-size: 6; /* In pixels */
    --construction-point-size: 6; /* In pixels */

    --point-stroke-size: 2px;
    --line-thickness: 2px;
    --axis-thickness: 1px;

    --tree-hover-color: white;
    --tree-selected-color: #334D80;

    --number-input-background: #545454;

    --collision-overlay-color: #FF0000;
    /* Set to 0 to hide collisions */
    /* --collision-overlay-opacity: 0.2;  */
    --collision-overlay-opacity: 0;

    --sidebar-color: #303030;
}

svg * {
    vector-effect: non-scaling-stroke;
}

/* svg> * {
    transform: translate(-50%, -50%) scale(90)
} */

/* Background Grid */

#grid rect {
    fill: var(--grid-background);
}

#grid path {
    stroke: var(--grid-line);
    stroke-opacity: var(--grid-line-opacity);
    stroke-width: var(--axis-thickness)
}

#x-axis {
    stroke: var(--x-axis-color);
    stroke-width: var(--axis-thickness)
}

#y-axis {
    stroke: var(--y-axis-color);
    stroke-width: var(--axis-thickness)
}

/* Point Template Stuff */

#regular-point {
    --point-size: var(--regular-point-size)
}

#construction-point {
    --point-size: var(--construction-point-size)
}

.point-template {
    transform: 
	    scale(var(--inverse-zoom)) /* Camera to World */
	    scale(var(--inverse-ppu)) /* World to Screen */
        scale(var(--point-size)) /* Convert point size to view space, scale it by that value */
	    ;

    vector-effect: non-scaling-stroke;
    fill: inherit;
    stroke: inherit;
    stroke-width: inherit;
}

/* Tree Styling */

.tree> button:nth-of-type(even)
{
    background-color: color-mix(in srgb, var(--sidebar-color), white 1.5686%)
}

.tree-cell {

    min-height: 22px;
    height: fit-content;
    font-size: 11pt;
    color: #C3C3C3;

    padding: 0;
    margin: 0;
    border-style: none;
    background-color: var(--sidebar-color);

    padding-left: calc(var(--tree-depth) * 22px);

    display: flex;
    flex-direction: row;
    justify-content: flex-start;
    align-items: center;
}

.icon {
    height: 20px;
    width: 20px;

    font-size: 20px;

    color: #C3C3C3;
    /* aspect-ratio: 1; */
}

/* Common Entity Styles */

.entity {
    /* fill: var(--entity-color); */
    fill: none;
    stroke: var(--loose-entity-color);
    stroke-width: var(--line-thickness);
}

.entity.fully-constrained {
    stroke: var(--entity-color);
}

.entity.construction {
    stroke-dasharray: 5;
    stroke-opacity: var(--construction-opacity);
}

.entity.selected {
    stroke: var(--entity-selected);
}

.entity.hover {
    stroke: var(--entity-hover);
}

.collision {
    fill: none;
    stroke-width: calc(5 * var(--line-thickness));
    stroke: var(--collision-overlay-color);
    stroke-opacity: var(--collision-overlay-opacity);
    stroke-linecap: round;
}